{"componentChunkName":"component---src-templates-blog-post-js","path":"/gemini/","result":{"data":{"site":{"siteMetadata":{"title":"Aditya Srinivasan"}},"mdx":{"id":"3c9b174a-abaf-59be-8e5f-2961e5f39d0c","excerpt":"For my undergraduate senior thesis, advised by  Drew\nHilton , I set out to solve the following\nproblem:  Verilog and other HDLs lack the expressivity andâ€¦","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Gemini: A Functional Hardware Description Language\",\n  \"published_on\": \"2019-11-10\",\n  \"type\": \"project\",\n  \"draft\": false,\n  \"tags\": [\"compilers\", \"hardware\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"For my undergraduate senior thesis, advised by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://adhilton.pratt.duke.edu/\"\n  }, \"Drew\\nHilton\"), \", I set out to solve the following\\nproblem: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Verilog and other HDLs lack the expressivity and modularity of modern\\nsoftware programming languages, due to a lack of features such as a strong type\\nsystem, recursion, pattern-matching, polymorphism, higher-order functions, and\\nmore.\")), mdx(\"p\", null, \"Specifically, I aimed to answer the following two questions:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Can I design a programming language that combines the powerful features of\\nsoftware programming languages with the ability to describe electronic circuits?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Can I develop a compiler that accepts a program in this language and produces\\nan optimized Verilog module?\"))), mdx(\"p\", null, \"Over the course of a year, I determined the answer to both of these questions to\\nbe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"yes\"), \", and the result was a programming language called Gemini.\"), mdx(\"p\", null, \"Along the way, I demonstrated with my prototype that novel type-theoretic\\nconcepts could be translated into concrete implementation. These concepts\\nincluded a type system with multiple kinds, dependent types, multi-phase\\ncompilation, and \\\"time as a type\\\".\"), mdx(\"p\", null, \"My research earned me the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ece.duke.edu/undergrad/students/awards-honors\"\n  }, \"Charles Ernest Seager Memorial\\nAward\"), \" for most\\noutstanding undergraduate research, and the inaugural spot in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://adhilton.pratt.duke.edu/hall-fame\"\n  }, \"Drew's Hall of\\nFame\"), \".\"), mdx(\"p\", null, \"An extended version of my thesis can be found\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://arxiv.org/abs/1911.03926\"\n  }, \"online\"), \", and my thesis presentation can be\\nfound \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/gemini_presentation.pdf\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"Further, one can also look at developer-oriented\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://zealous-swanson-536aa0.netlify.app/#/\"\n  }, \"documentation\"), \" and the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/adisrini/gemini-lang\"\n  }, \"source\\ncode\"), \" for more detail.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Gemini: A Functional Hardware Description Language","published_on":"November 10, 2019","updated_on":null,"description":null,"tags":["compilers","hardware"],"draft":false,"bookish":null},"fields":{"readingTime":{"text":"2 min read"}}},"previous":{"fields":{"slug":"/text-detection-and-inpainting/"},"frontmatter":{"title":"Text Detection and Inpainting"}},"next":{"fields":{"slug":"/on-time-and-tone/"},"frontmatter":{"title":"On Time and Tone"}}},"pageContext":{"id":"3c9b174a-abaf-59be-8e5f-2961e5f39d0c","previousPostId":"3e831343-9a55-5ff5-b2e4-7da551f214c9","nextPostId":"a55523ed-9141-5ee3-97e7-692427c61817"}},"staticQueryHashes":["234287855","2433109408","4239340312"]}